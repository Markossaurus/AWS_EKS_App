pipeline{
    agent any
    parameters{
        string name: 'TFVARS_LOC', description: 'insert location of tfvars file'
        string name: 'HUB_NAME', description: 'insert docker hub repo name'
    }
    environment{
        AWS_DEFAULT_REGION = 'eu-central-1'
        MY_AWS_CREDS = credentials('aws-creds')
        DOCKERHUB_CREDENTIALS=credentials('dockerhub_creds')
        TFVARS_LOC = "$TFVARS_LOC"
        HUB_NAME = "$HUB_NAME"
    }
    stages {
          stage("checkout"){
              steps{
                checkout([$class:'GitSCM', branches:[[name:'**']], extensions:[], userRemoteConfigs: [[credentialsId: 'edd5b572-22c2-43c1-a50b-991127524391', name:'origin', refspec:"+refs/pull/*:refs/remotes/origin/pr/*", url:'git@github.com:Markossaurus/AWS_EKS_App.git']]])
              }
          }
           stage("build images and push to registry"){
          
               steps{

                sh """
                    docker build -t $HUB_NAME/webserver1:latest NginxCostum1/.
                """

                echo "building webserver2 images"
                sh """
                    docker build -t $HUB_NAME/webserver2:latest NginxCostum2/.
                """

                echo "building haproxy image"
                sh """
                    docker build -t $HUB_NAME/haproxy:latest HAProxyImage/.
                """

                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'

                sh 'docker push $HUB_NAME/webserver1:latest'

                sh 'docker push $HUB_NAME/webserver2:latest'

                sh 'docker push $HUB_NAME/haproxy:latest'
          
                }
           }

          stage("deploy eks cluster"){
             steps{
                echo "deploying cluster"
                dir("terraform") {
                    sh 'terraform init'
                    sh 'terraform apply -var-file="$TFVARS_LOC" -auto-approve'
                }
             } 
         }
         
          stage("create kubectl config"){
              steps{
                echo "creating kubectl config"
                sh "aws eks --region eu-central-1 update-kubeconfig --name haproxy"
                echo "granting permissions to all users for cluster mgmt porpuses(insecure but for personal project is ok)"
                sh "chmod 777 /var/lib/jenkins/.kube/config"
                }
            } 
          stage("deploy app"){
              steps{
                echo "deploying app"
                sh 'kubectl apply -f kubernetes/webserver1.yaml'
                sh 'kubectl apply -f kubernetes/webserver2.yaml'
                sh 'kubectl apply -f kubernetes/haproxy.yaml'
                sh 'kubectl apply -f kubernetes/serv1.yaml'
                sh 'kubectl apply -f kubernetes/serv2.yaml'
                sh 'kubectl apply -f kubernetes/haserv.yaml'
              }
          }   
   
            
    }
} 
         